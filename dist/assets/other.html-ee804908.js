import{_ as s,p as n,q as a,a1 as e}from"./framework-96b046e1.js";const t={},p=e(`<nav class="table-of-contents"><ul><li><a href="#http-server-启动-https-服务">http-server 启动 https 服务</a></li><li><a href="#在-es-模块-node-js-中导入-json-文件">在 ES 模块（Node.js）中导入 JSON 文件</a></li><li><a href="#自动重启-node-服务">自动重启 node 服务</a></li><li><a href="#如何在-node-中使用-esm">如何在 node 中使用 esm？</a></li><li><a href="#node-esm-中-filename、-dirname-怎么获取">node esm 中__filename、__dirname 怎么获取？</a></li></ul></nav><h3 id="http-server-启动-https-服务" tabindex="-1"><a class="header-anchor" href="#http-server-启动-https-服务" aria-hidden="true">#</a> http-server 启动 https 服务</h3><ul><li>安装 http-server</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> http-server
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>安装 openssl，并设置环境变量，保证 openssl 命令可用</li><li>使用 openssl 生成 key.pem 和 cert.pem</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>openssl req <span class="token parameter variable">-newkey</span> rsa:2048 <span class="token parameter variable">-new</span> <span class="token parameter variable">-nodes</span> <span class="token parameter variable">-x509</span> <span class="token parameter variable">-days</span> <span class="token number">3650</span> <span class="token parameter variable">-keyout</span> key.pem <span class="token parameter variable">-out</span> cert.pem
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>把生成的 key.pem 和 cert.pem 文件放在服务目录，使用如下命令即可启动 https 服务</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>http-server <span class="token parameter variable">-S</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="在-es-模块-node-js-中导入-json-文件" tabindex="-1"><a class="header-anchor" href="#在-es-模块-node-js-中导入-json-文件" aria-hidden="true">#</a> 在 ES 模块（Node.js）中导入 JSON 文件</h3><ol><li>使用 fs 模块读取和解析 JSON 文件</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> readFile <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;fs/promises&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> jsonData <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token function">readFile</span><span class="token punctuation">(</span><span class="token string">&#39;./a.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>利用 CommonJS require 方法加载 JSON 文件，createRequire 允许您构造 CommonJS require 方法，以便可以使用典型的 CommonJS 功能</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> createRequire <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> require <span class="token operator">=</span> <span class="token function">createRequire</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> jsonData <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./a.json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>import Assertions</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> jsonData <span class="token keyword">from</span> <span class="token string">&#39;./a.json&#39;</span> <span class="token keyword">assert</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;json&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="自动重启-node-服务" tabindex="-1"><a class="header-anchor" href="#自动重启-node-服务" aria-hidden="true">#</a> 自动重启 node 服务</h3><p>使 nodemon 执行 node 文件，当文件变更时会自动重启服务<code>node index.js</code></p><h3 id="如何在-node-中使用-esm" tabindex="-1"><a class="header-anchor" href="#如何在-node-中使用-esm" aria-hidden="true">#</a> 如何在 node 中使用 esm？</h3><p>在 node 中使用 esm 有 2 种方案：</p><ul><li>在 package.json 中指定 type: &quot;module&quot;，表明模块的类型。此时.js 结尾的默认是 esm，cjs 的文件后缀名要变更为.cjs 才能识别</li><li>将文件后缀改成.mjs，标明该文件是 esm 模块</li></ul><h3 id="node-esm-中-filename、-dirname-怎么获取" tabindex="-1"><a class="header-anchor" href="#node-esm-中-filename、-dirname-怎么获取" aria-hidden="true">#</a> node esm 中__filename、__dirname 怎么获取？</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// i<wbr>mport.meta.url 返回模块的绝对的 \`file:\` URL。</span>
<span class="token comment">// url模块中fileURLToPath()函数，返回完全解析的特定于平台的 Node.js 文件路径</span>
<span class="token comment">// path模块中dirname()函数，返回路径的目录路径</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> fileURLToPath <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;url&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> dirname <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// i<wbr>mport.meta.url：file:///D:/project/vite-learn/dev-server/index.mjs</span>
<span class="token comment">// __filename：D:/project/vite-learn/dev-server/index.mjs</span>
<span class="token comment">// __dirname：D:/project/vite-learn/dev-server</span>
<span class="token keyword">const</span> __filename <span class="token operator">=</span> <span class="token function">fileURLToPath</span><span class="token punctuation">(</span><span class="token keyword">import</span><span class="token punctuation">.</span>meta<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> __dirname <span class="token operator">=</span> <span class="token function">dirname</span><span class="token punctuation">(</span>__filename<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),o=[p];function i(l,r){return n(),a("div",null,o)}const d=s(t,[["render",i],["__file","other.html.vue"]]);export{d as default};
